<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition="'$(GitBuildInfoTaskImported)' == ''">
    <GitBuildInfoTaskImported>true</GitBuildInfoTaskImported>
  </PropertyGroup>

  <UsingTask TaskName="GitBuildInfo.GitBuildInfoTask"
             TaskFactory="RoslynCodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <OutputPath Required="true" />
      <AssemblyType Required="true" />
      <IsGeneric ParameterType="System.Boolean" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.ComponentModel" />
      <Using Namespace="System.Diagnostics" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Class" Language="cs">
        <![CDATA[
namespace GitBuildInfo
{
    using System;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.IO;
    using System.Text;
    using Microsoft.Build.Framework;
    using Microsoft.Build.Utilities;
    
    /// <summary>
    /// A MSBuild task that generates the msbuild information for an assembly.
    ///
    /// Note: use in the BeforeBuild target.
    /// </summary>
    public class GitBuildInfoTask : Task
    {
        /// <summary>
        /// Gets or sets the generated output file path.
        /// </summary>
        [Required]
        public string OutputPath { get; set; }

        /// <summary>
        /// Gets or sets the type to use to get the current assembly to that the attribute is applied to.
        /// </summary>
        [Required]
        public string AssemblyType { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the type to use is a Generic type.
        /// </summary>
        [Required]
        public bool IsGeneric { get; set; }

        /// <inheritdoc/>
        public override bool Execute()
        {
            var splitted = this.AssemblyType.Contains(".") ? this.AssemblyType.Split('.') : new string[] { };
            var splittedLen = splitted.Length;
            var usingStr = new StringBuilder();
            var gitinformationNamespace = "Elskom.Generic.Libs";
            foreach (var value in splitted)
            {
                // skip the last value.
                if (value != splitted[splittedLen - 1])
                {
                    if (value != splitted[0])
                    {
                        usingStr.Append(".");
                    }

                    usingStr.Append(value);
                }
            }

            this.RunGit("describe --all --always --dirty", out var git_out1);
            this.RunGit("rev-parse --short HEAD", out var git_out2);
            this.RunGit("name-rev --name-only HEAD", out var git_out3);
            var outputData = $@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

{(splittedLen > 0 && !string.Equals(gitinformationNamespace, usingStr.ToString(), StringComparison.Ordinal) ? $"using {usingStr};{Environment.NewLine}using {gitinformationNamespace};" : $"using {gitinformationNamespace};")}

[assembly: GitInformationAttribute(""{git_out1}"", ""{git_out2}"", ""{git_out3}"", typeof({(splittedLen > 0 ? splitted[splittedLen - 1] : this.AssemblyType)}{(this.IsGeneric ? "<>" : string.Empty)}))]
";

            // patch 112019: only print the getting build info from git message from the initial call to this task.
            // all other calls will not print anything to avoid spamming up the build output.
            try
            {
                if (!File.Exists(this.OutputPath) || (File.Exists(this.OutputPath) && !string.Equals(outputData, File.ReadAllText(this.OutputPath), StringComparison.Ordinal)))
                {
                    this.Log.LogMessage(MessageImportance.High, "Getting build info from git");
                    try
                    {
                        using var fstream = new StreamWriter(this.OutputPath, false, new UTF8Encoding(false));
                        fstream.Write(outputData);
                    }
                    catch (IOException)
                    {
                        // catch I/O error from being unable to open the file for writing.
                    }
                }
            }
            catch (IOException)
            {
                // catch I/O error from being unable to open the file for checking it's contents.
            }

            return true;
        }

        private void RunGit(string arguments, out string git_out)
        {
            using var pro1 = new Process();
            pro1.StartInfo.FileName = "git";
            pro1.StartInfo.Arguments = arguments;
            pro1.StartInfo.RedirectStandardOutput = true;
            pro1.StartInfo.UseShellExecute = false;
            pro1.StartInfo.CreateNoWindow = true;
            pro1.StartInfo.WorkingDirectory = Path.GetFullPath(this.OutputPath).Replace(Path.GetFileName(this.OutputPath), string.Empty);
            try
            {
                _ = pro1.Start();
                git_out = pro1.StandardOutput.ReadToEnd();
                pro1.WaitForExit();

                // handle all cases of possible endlines.
                git_out = git_out.Replace("\r\n", string.Empty);
                git_out = git_out.Replace("\n", string.Empty);
                git_out = git_out.Replace("\r", string.Empty);
            }
            catch (Win32Exception)
            {
                git_out = "Not a git clone or git is not in Path.";
            }
        }
    }
}]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
